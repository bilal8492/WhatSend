{"version":3,"sources":["App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","countries","setCountries","number","setNumber","countryCode","setCountryCode","flagUrl","setFlagUrl","useEffect","a","fetchCountries","tasksFromServer","getCategory","fetch","res","json","data","className","id","src","alt","width","value","onChange","e","index","target","selectedIndex","alpha3Code","childNodes","getAttribute","country","filter","c","includes","flag","changeFlag","map","data-alpha3code","callingCodes","name","num","replace","type","minLength","maxLength","placeholder","required","onClick","whatsappUrl","length","alert","window","open","style","marginTop","rel","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"+OAwHeA,MApHf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIiBN,mBAC5B,oEALW,mBAINO,EAJM,KAIGC,EAJH,KAQbC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACYC,IADZ,OACZC,EADY,OAElBV,EAAaU,GAFK,2CAAH,qDAIjBC,KACC,IAEH,IAAMF,EAAc,uCAAG,8BAAAD,EAAA,sEACHI,MAAM,oCADH,cACfC,EADe,gBAEFA,EAAIC,OAFF,cAEfC,EAFe,yBAGdA,GAHc,2CAAH,qDA4BpB,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKC,GAAG,UAAR,UACE,qBAAKC,IAAI,cAAcC,IAAI,OAAOH,UAAU,SAC5C,gDAEF,qBAAKC,GAAG,OAAR,SACE,sBAAKA,GAAG,YAAR,UACE,sFACA,sBAAKA,GAAG,SAAR,UACE,qBAAKA,GAAG,OAAOC,IAAKb,EAASc,IAAI,eAAeC,MAAM,SACtD,gCACE,wBAAQC,MAAOlB,EAAac,GAAG,YAAYK,SAAU,SAACC,GAAD,OA3B9C,SAACA,GAClB,IAAIC,EAAQD,EAAEE,OAAOC,cACjBC,EAAaJ,EAAEE,OAAOG,WAAWJ,GAAOK,aAAa,mBACrDC,EAAU/B,EAAUgC,QAAO,SAACC,GAAD,OAAOA,EAAEL,WAAWM,SAASN,MAC5DvB,EAAemB,EAAEE,OAAOJ,OACxBf,EAAWwB,EAAQ,GAAGI,MAsBgDC,CAAWZ,IAAvE,SACGxB,EAAUqC,KAAI,SAACN,GAAD,OACb,yBACEO,kBAAiBP,EAAQH,WACzBN,MAAOS,EAAQQ,aAFjB,cAIIR,EAAQQ,aAJZ,IAI2BR,EAAQS,OAJtBT,EAAQH,mBAS3B,gCACE,uBACEN,MAAOpB,EACPqB,SAhDO,SAACC,GACpB,IAAIiB,EAAMjB,EAAEE,OAAOJ,MAEnBmB,GADAA,EAAMA,EAAIC,QAAQ,MAAO,KACfA,QAAJ,WAAgBtC,GAAe,IACrCD,EAAUsC,IA6CEE,KAAK,MACLC,UAAU,IACVC,UAAU,KACVC,YAAY,qBACZ5B,GAAG,gBACH6B,UAAQ,MAGZ,0BAGF,yBAAQC,QA7CK,WACnB,IAAIC,EAAW,8CAA0C7C,GAA1C,OAAwDF,GACvEA,EAAOgD,OAAS,EACZC,MAAM,wBACNC,OAAOC,KAAKJ,EAAa,WAyCQ/B,GAAG,UAAlC,UACE,qBAAKC,IAAI,cAAcC,IAAI,SAD7B,IACuC,gDAA0B,YAIrE,mCACE,0IAIA,oBAAGkC,MAAO,CAAEC,UAAW,GAAvB,0BACe,qBAAKlC,MAAM,KAAKF,IAAI,YAAYC,IAAI,UADnD,MACiE,IAC/D,mBAAGoC,IAAI,WAAWC,KAAK,gCAAgC/B,OAAO,SAA9D,mBAFF,6BAK6B,IAC3B,mBAAG8B,IAAI,WAAWC,KAAK,wCAAwC/B,OAAO,SAAtE,uBAIF,oBAAG4B,MAAO,CAAEC,UAAW,GAAvB,sDAC4C,IAC1C,mBAAGC,IAAI,WACLC,KAAK,+CACL/B,OAAO,SAFT,6BChGJgC,EAAcC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,YAAwB7C,OAAOQ,SAASH,MACpDyC,SAAW9C,OAAOQ,SAASsC,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMiC,YAAN,sBAEPvC,IAgEV,SAAiCM,EAAOC,GAEtCpD,MAAMmD,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAACgC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAACC,GAClCA,EAAaqC,aAAatC,MAAK,WAC7BjB,OAAOQ,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFV+B,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OE/B/B6C,GAKA3B,M","file":"static/js/main.64cbe29a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [number, setNumber] = useState('');\n  const [countryCode, setCountryCode] = useState(91);\n  const [flagUrl, setFlagUrl] = useState(\n    \"https://upload.wikimedia.org/wikipedia/en/4/41/Flag_of_India.svg\"\n  );\n\n  useEffect(() => {\n    const getCategory = async () => {\n      const tasksFromServer = await fetchCountries();\n      setCountries(tasksFromServer);\n    };\n    getCategory();\n  }, []);\n\n  const fetchCountries = async () => {\n    const res = await fetch(`https://restcountries.com/v2/all`);\n    const data = await res.json();\n    return data;\n  };\n\n  const onNumberType = (e) => {\n    let num = e.target.value;\n    num = num.replace(/\\s/g, '')\n    num = num.replace(`+${countryCode}`, '')\n    setNumber(num);\n  }\n\n  const changeFlag = (e) => {\n    var index = e.target.selectedIndex;\n    var alpha3Code = e.target.childNodes[index].getAttribute(\"data-alpha3code\");\n    var country = countries.filter((c) => c.alpha3Code.includes(alpha3Code));\n    setCountryCode(e.target.value);\n    setFlagUrl(country[0].flag);\n  };\n\n  const openWhatsapp = () => {\n    var whatsappUrl = `https://api.whatsapp.com/send?phone=${countryCode}${number}`;\n    number.length < 7\n      ? alert(\"Invalid phone Number\")\n      : window.open(whatsappUrl, \"_blank\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"heading\">\n        <img src=\"logo192.png\" alt=\"logo\" className=\"logo\" />\n        <h1> WhatSend! </h1>\n      </div>\n      <div id=\"main\">\n        <div id=\"container\">\n          <p>Send Whatsapp messages without saving contact number.</p>\n          <div id=\"number\">\n            <img id=\"flag\" src={flagUrl} alt=\"country flaf\" width=\"30px\" />\n            <label>\n              <select value={countryCode} id=\"countries\" onChange={(e) => changeFlag(e)}>\n                {countries.map((country) => (\n                  <option key={country.alpha3Code}\n                    data-alpha3code={country.alpha3Code}\n                    value={country.callingCodes}\n                  >\n                    +{country.callingCodes} {country.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n            <label>\n              <input\n                value={number}\n                onChange={onNumberType}\n                type=\"tel\"\n                minLength=\"5\"\n                maxLength=\"15\"\n                placeholder=\"Enter your number!\"\n                id=\"mobile-number\"\n                required\n              />\n            </label>\n            <br />\n\n          </div>\n          <button onClick={openWhatsapp} id=\"message\">\n            <img src=\"logo192.png\" alt=\"logo\" /> <span>Send Message</span>{\" \"}\n          </button>\n        </div>\n      </div>\n      <footer>\n        <p>\n          This application is not associated with WhatsApp and It uses WhatsApp\n          api to redirect the contact number.\n        </p>\n        <p style={{ marginTop: 0 }}>\n          Created with <img width=\"20\" src=\"heart.svg\" alt=\"heart\" /> by{\" \"}\n          <a rel=\"noopener\" href=\"https://twitter.com/bilal8492\" target=\"_blank\">\n            Bilal\n          </a>\n          . Source code available at{\" \"}\n          <a rel=\"noopener\" href=\"https://github.com/bilal8492/whatSend\" target=\"_blank\">\n            Github\n          </a>\n        </p>\n        <p style={{ marginTop: 0 }}>\n          For any feedback and bug report create an{\" \"}\n          <a rel=\"noopener\"\n            href=\"https://github.com/bilal8492/WhatSend/issues\"\n            target=\"_blank\"\n          >\n            Issue\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}