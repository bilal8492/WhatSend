{"version":3,"sources":["App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","countries","setCountries","number","setNumber","countryCode","setCountryCode","flagUrl","setFlagUrl","useEffect","a","fetchCountries","tasksFromServer","getCategory","fetch","res","json","data","className","id","src","alt","width","value","onChange","e","index","target","selectedIndex","alpha3Code","childNodes","getAttribute","country","filter","c","includes","flag","changeFlag","map","data-alpha3code","callingCodes","name","type","minLength","maxLength","placeholder","required","onClick","whatsappUrl","length","alert","window","open","style","marginTop","rel","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bfffc8f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [number, setNumber] = useState([]);\r\n  const [countryCode, setCountryCode] = useState(91);\r\n  const [flagUrl, setFlagUrl] = useState(\r\n    \"https://restcountries.eu/data/ind.svg\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    const getCategory = async () => {\r\n      const tasksFromServer = await fetchCountries();\r\n      setCountries(tasksFromServer);\r\n    };\r\n    getCategory();\r\n  }, []);\r\n\r\n  const fetchCountries = async () => {\r\n    const res = await fetch(`https://restcountries.eu/rest/v2/all`);\r\n    const data = await res.json();\r\n    return data;\r\n  };\r\n\r\n  const changeFlag = (e) => {\r\n    var index = e.target.selectedIndex;\r\n    var alpha3Code = e.target.childNodes[index].getAttribute(\"data-alpha3code\");\r\n    var country = countries.filter((c) => c.alpha3Code.includes(alpha3Code));\r\n    setCountryCode(e.target.value);\r\n    setFlagUrl(country[0].flag);\r\n  };\r\n\r\n  const openWhatsapp = () => {\r\n    var whatsappUrl = `https://api.whatsapp.com/send?phone=${countryCode}${number}`;\r\n    number.length < 7\r\n      ? alert(\"Invalid phone Number\")\r\n      : window.open(whatsappUrl, \"_blank\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"heading\">\r\n        <img src=\"logo.svg\" alt=\"logo\" />\r\n        <h1> WhatSend! </h1>\r\n      </div>\r\n      <div id=\"main\">\r\n        <div id=\"container\">\r\n          <p>Send Whatsapp messages without saving contact number.</p>\r\n          <div id=\"number\">\r\n            <img id=\"flag\" src={flagUrl} alt=\"country flaf\" width=\"30px\" />\r\n            <label>\r\n            <select value={countryCode} id=\"countries\" onChange={(e) => changeFlag(e)}>\r\n              {countries.map((country) => (\r\n                <option key={country.alpha3Code}\r\n                  data-alpha3code={country.alpha3Code}\r\n                  value={country.callingCodes}\r\n                >\r\n                  +{country.callingCodes} {country.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            </label>\r\n            <label>\r\n            <input\r\n              onChange={(c) => setNumber(c.target.value)}\r\n              type=\"tel\"\r\n              minLength=\"5\"\r\n              maxLength=\"10\"\r\n              placeholder=\"Enter your number!\"\r\n              id=\"mobile-number\"\r\n              required\r\n            />\r\n            </label>\r\n          </div>\r\n          <button onClick={openWhatsapp} id=\"message\">\r\n            <img src=\"logo.svg\" alt=\"logo\" /> <span>Send Message</span>{\" \"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <p>\r\n          This application is not associated with WhatsApp and It uses WhatsApp\r\n          api to redirect the contact number.\r\n        </p>\r\n        <p style={{ marginTop: 0 }}>\r\n          Created with <img width=\"20\" src=\"heart.svg\" alt=\"heart\" /> by{\" \"}\r\n          <a rel=\"noopener\" href=\"https://twitter.com/bilal8492\" target=\"_blank\">\r\n            Bilal\r\n          </a>\r\n          . Source code available at{\" \"}\r\n          <a rel=\"noopener\" href=\"https://github.com/bilal8492/whatSend\" target=\"_blank\">\r\n            Github\r\n          </a>\r\n        </p>\r\n        <p style={{ marginTop: 0 }}>\r\n          For any feedback and bug report create an{\" \"}\r\n          <a rel=\"noopener\"\r\n            href=\"https://github.com/bilal8492/WhatSend/issues\"\r\n            target=\"_blank\"\r\n          >\r\n            Issue\r\n          </a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}